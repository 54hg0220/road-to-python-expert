# ✅ import module：导入整个模块
# 📌 适用场景：
# 当你需要使用模块中的多个函数或类时。
# 当你希望代码更清晰，能看出函数或类来自哪个模块。
# 当你担心命名冲突时。
# ✅ 推荐理由：
# 可读性强：调用时带有模块前缀（如 math.sqrt()），一眼就能看出来源。
# 避免命名冲突：多个模块中可能有同名函数，使用前缀可以区分。
import os
import sys

sys.path.append("path/to/module")
print(os.path.basename("/path/to/file.txt"))


# ✅ from module import name：导入模块中的某个部分
# 📌 适用场景：
# 当你只需要模块中的某个函数、类或变量。
# 当你希望代码更简洁，避免频繁写模块前缀。
# ✅ 推荐理由：
# 简洁：直接使用函数名或类名。
# 性能略优：只加载需要的部分（虽然在大多数情况下差别不大）。
from math import pi, sin

print(sin(pi / 2))  # 输出 1.0


# ✅ if __name__ == "__main__"：模块入口判断
# 📌 适用场景：
# 当你希望模块既可以被导入使用，又可以独立运行时。
# 常用于脚本、工具类模块、测试代码等。
# ✅ 推荐理由：
# 模块复用性强：导入时不会执行测试代码或主逻辑。
# 结构清晰：主程序入口明确，便于维护和调试。
def main():
    print("这是主程序")


if __name__ == "__main__":
    main()
