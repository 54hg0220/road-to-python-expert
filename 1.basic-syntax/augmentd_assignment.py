# 运算符	含义	示例	等价于
# +=	加法赋值	x += 2	x = x + 2
# -=	减法赋值	x -= 2	x = x - 2
# *=	乘法赋值	x *= 2	x = x * 2
# /=	除法赋值（浮点）	x /= 2	x = x / 2
# //=	整除赋值	x //= 2	x = x // 2
# %=	取模赋值	x %= 2	x = x % 2
# **=	幂赋值	x **= 2	x = x ** 2
# &=	按位与赋值	x &= 2	x = x & 2
# `	=`	按位或赋值	`x
# ^=	按位异或赋值	x ^= 2	x = x ^ 2
# >>=	右移赋值	x >>= 1	x = x >> 1
# <<=	左移赋值	x <<= 1	x = x << 1

lst = [1, 2, 3]
lst += [4, 5]  # 等价于 lst = lst + [4, 5]
print(lst)  # 输出: [1, 2, 3, 4, 5]
# 注意：+= 对于列表是就地修改（in-place），而 + 是创建新列表。

x = 16  # 二进制: 10000
x >>= 2  # 右移两位 -> 00100
print(x)  # 输出: 4

x = 3  # 二进制: 11
x <<= 3  # 左移三位 -> 11000
print(x)  # 输出: 24

# 快速乘以 8
x = 5
x <<= 3  # 相当于 x = x * 8

READ = 0b0001
WRITE = 0b0010
EXECUTE = 0b0100

permissions = 0
permissions |= READ  # 添加读权限
permissions |= WRITE  # 添加写权限

# 移除写权限
permissions &= ~WRITE

a = 0b0110  # 十进制 6
b = 0b0101  # 十进制 5

a &= b  # a = a & b
# 0110 & 0101 = 0100
# 所以 a = 0b0100，即十进制 4

# 运算符	名称	作用说明
# &	按位与（AND）	两个位都为 1，结果才为 1
# `	`	按位或（OR）
# ^	按位异或（XOR）	不同为 1，相同为 0
# ~	按位取反（NOT）	0 变 1，1 变 0（注意是补码）
# <<	左移	向左移动若干位，相当于乘以 2 的 n 次方
# >>	右移	向右移动若干位，相当于除以 2 的 n 次方

a = 12  # 0b1100
b = 10  # 0b1010

print("a & b =", a & b)
print("a | b =", a | b)
print("a ^ b =", a ^ b)
print("~a =", ~a)
print("a << 2 =", a << 2)
print("a >> 2 =", a >> 2)
